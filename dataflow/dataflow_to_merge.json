{
	"name": "dataflow_to_merge",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_cases",
						"type": "DatasetReference"
					},
					"name": "caseSource"
				},
				{
					"dataset": {
						"referenceName": "ds_casemapprevious",
						"type": "DatasetReference"
					},
					"name": "previousCaseSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dsCaseMap",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "hashColumnName"
				},
				{
					"name": "hashColumnPrevious"
				},
				{
					"name": "exists1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          caseID as string,",
				"          caseDesc as string,",
				"          isActive as string,",
				"          isRestrictedAccess as string,",
				"          openDate as string,",
				"          eventType as string,",
				"          userIDCreator as string,",
				"          note as string,",
				"          hoduntil as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> caseSource",
				"source(output(",
				"          caseID as string,",
				"          caseDesc as string,",
				"          isActive as string,",
				"          isRestrictedAccess as string,",
				"          openDate as string,",
				"          eventType as string,",
				"          userIDCreator as string,",
				"          note as string,",
				"          hoduntil as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> previousCaseSource",
				"caseSource derive(hashCaseId = sha2(256,caseID)) ~> hashColumnName",
				"previousCaseSource derive(hasCaseIdPRev = sha2(256,caseID)) ~> hashColumnPrevious",
				"hashColumnName, hashColumnPrevious exists(hashCaseId == hasCaseIdPRev,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"exists1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          caseID as string,",
				"          caseDesc as string,",
				"          isActive as string,",
				"          isRestrictedAccess as string,",
				"          openDate as string,",
				"          eventType as string,",
				"          userIDCreator as string,",
				"          note as string,",
				"          hoduntil as string",
				"     ),",
				"     partitionFileNames:['dbocobancasesMap.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}